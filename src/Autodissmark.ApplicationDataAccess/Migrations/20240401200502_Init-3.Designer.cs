// <auto-generated />
using System;
using Autodissmark.ApplicationDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Autodissmark.ApplicationDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20240401200502_Init-3")]
    partial class Init3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.AcapellaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationMilliseconds")
                        .HasColumnType("int");

                    b.Property<int>("EndDelayMilliseconds")
                        .HasColumnType("int");

                    b.Property<int>("StartDelayMilliseconds")
                        .HasColumnType("int");

                    b.Property<int>("TextEntityId")
                        .HasColumnType("int");

                    b.Property<string>("URI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoiceEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TextEntityId");

                    b.HasIndex("VoiceEntityId");

                    b.ToTable("Acapellas");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.ArtistEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.BeatEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BPM")
                        .HasColumnType("int");

                    b.Property<string>("SourceLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Beats");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.DissAcapellaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcapellaEntityId")
                        .HasColumnType("int");

                    b.Property<int>("DissEntityId")
                        .HasColumnType("int");

                    b.Property<int>("StartPointMilliseconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcapellaEntityId");

                    b.HasIndex("DissEntityId");

                    b.ToTable("DissAcapellas");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.DissEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BeatEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeatEntityId");

                    b.ToTable("Disses");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.TextEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorEntityId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.VoiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistEntityId")
                        .HasColumnType("int");

                    b.Property<double>("Pitch")
                        .HasColumnType("float");

                    b.Property<double>("Speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArtistEntityId");

                    b.ToTable("Voices");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.AcapellaEntity", b =>
                {
                    b.HasOne("Autodissmark.ApplicationDataAccess.Entities.TextEntity", "TextEntity")
                        .WithMany("AcapellaEntities")
                        .HasForeignKey("TextEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autodissmark.ApplicationDataAccess.Entities.VoiceEntity", "VoiceEntity")
                        .WithMany("AcapellaEntities")
                        .HasForeignKey("VoiceEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextEntity");

                    b.Navigation("VoiceEntity");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.DissAcapellaEntity", b =>
                {
                    b.HasOne("Autodissmark.ApplicationDataAccess.Entities.AcapellaEntity", "AcapellaEntity")
                        .WithMany("DissAcapellaEntities")
                        .HasForeignKey("AcapellaEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autodissmark.ApplicationDataAccess.Entities.DissEntity", "DissEntity")
                        .WithMany("DissAcapellaEntities")
                        .HasForeignKey("DissEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcapellaEntity");

                    b.Navigation("DissEntity");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.DissEntity", b =>
                {
                    b.HasOne("Autodissmark.ApplicationDataAccess.Entities.BeatEntity", "BeatEntity")
                        .WithMany("DissEntities")
                        .HasForeignKey("BeatEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeatEntity");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.TextEntity", b =>
                {
                    b.HasOne("Autodissmark.ApplicationDataAccess.Entities.AuthorEntity", "AuthorEntity")
                        .WithMany("TextEntities")
                        .HasForeignKey("AuthorEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorEntity");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.VoiceEntity", b =>
                {
                    b.HasOne("Autodissmark.ApplicationDataAccess.Entities.ArtistEntity", "ArtistEntity")
                        .WithMany("VoiceEntities")
                        .HasForeignKey("ArtistEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtistEntity");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.AcapellaEntity", b =>
                {
                    b.Navigation("DissAcapellaEntities");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.ArtistEntity", b =>
                {
                    b.Navigation("VoiceEntities");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.AuthorEntity", b =>
                {
                    b.Navigation("TextEntities");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.BeatEntity", b =>
                {
                    b.Navigation("DissEntities");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.DissEntity", b =>
                {
                    b.Navigation("DissAcapellaEntities");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.TextEntity", b =>
                {
                    b.Navigation("AcapellaEntities");
                });

            modelBuilder.Entity("Autodissmark.ApplicationDataAccess.Entities.VoiceEntity", b =>
                {
                    b.Navigation("AcapellaEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
