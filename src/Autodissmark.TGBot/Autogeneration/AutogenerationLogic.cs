using Autodissmark.ExternalServices.Translate.GoogleTranslate;
using Autodissmark.TGBot.API;
using Autodissmark.TGBot.API.Requests;
using Autodissmark.TGBot.API.Responses;
using Autodissmark.TGBot.Options;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json.Linq;
using OpenQA.Selenium.DevTools;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using Telegram.Bot.Types;
using static System.Net.Mime.MediaTypeNames;

namespace Autodissmark.TGBot.Autogeneration;

public class AutogenerationLogic
{
    private readonly ApiOptions _apiOptions;
    private readonly AutogenerationOptions _autogenerationOptions;
    private readonly HttpClient _httpClient;

    public AutogenerationLogic
    (
        ApiOptions apiOptions,
        AutogenerationOptions autogenerationOptions
    )
    {
        _apiOptions = apiOptions;
        _autogenerationOptions = autogenerationOptions;
        _httpClient = new HttpClient();
    }

    public async Task<bool> Autogenerate()
    {
        await Login();
        var jwtToken = _httpClient.DefaultRequestHeaders.Authorization.ToString();
        Console.WriteLine($"response.JwtToken: {jwtToken}");

        var text = await GenerateText(_autogenerationOptions.LinesCounts.FirstOrDefault(), _autogenerationOptions.WordsInLineCounts.FirstOrDefault());
        Console.WriteLine($"text: {text}");

        var targetedText = await AddTargetToText(text, _autogenerationOptions.Targets.FirstOrDefault());
        Console.WriteLine($"targetedText: {targetedText}");

        var switchedText = await SwitchTranslateText(targetedText, Language.English, 4);
        Console.WriteLine($"switchedText: {switchedText}");

        var textId = await CreateText(switchedText, "Autogenerated tgBot diss");
        Console.WriteLine($"textId: {textId}");

        var acapellaId = await CreateAutoVoiceover(textId, _autogenerationOptions.Voices.FirstOrDefault());
        Console.WriteLine($"acapellaId: {acapellaId}");

        var dissId = await CreateDiss(acapellaId, _autogenerationOptions.Beats.FirstOrDefault(), 0, _autogenerationOptions.Targets.FirstOrDefault());
        Console.WriteLine($"dissId: {dissId}");

        var diss = await GetDiss(dissId);
        Console.WriteLine($"diss.AudioData: {diss.AudioData}");

        return true;
    }

    public async Task Login()
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.Login}";
        var request = new LoginRequest(_apiOptions.Email, _apiOptions.Password);

        var response = await ApiRequestHelper.PostAsync<LoginRequest, API.ApiResponse<LoginResponse>>(_httpClient, url, request);

        var jwtToken = response.Data.JwtToken;
        var jwtTokenValue = jwtToken.Split(' ')[1];

        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtTokenValue);
    }

    public async Task<string> GenerateText(int linesCount, int wordsInLineCount)
    {
        var url = $"{_apiOptions.BaseUrl}{string.Format(_apiOptions.GenerateText, linesCount, wordsInLineCount)}";

        var response = await ApiRequestHelper.GetAsync<API.ApiResponse<string>>(_httpClient, url);
        return response.Data;
    }

    public async Task<string> AddTargetToText(string text, string target)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.AddTargetToText}";
        var request = new AddTargetToTextRequest(text, target);

        var response = await ApiRequestHelper.PostAsync<AddTargetToTextRequest, API.ApiResponse<string>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<string> SwitchTranslateText(string text, Language switchLanguage, int switchTimes)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.SwitchTranslateText}";
        var request = new SwitchTranslateTextRequest(text, switchLanguage, switchTimes);

        var response = await ApiRequestHelper.PostAsync<SwitchTranslateTextRequest, API.ApiResponse<string>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<int> CreateText(string text, string title)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.CreateText}";
        var request = new CreateTextRequest(_apiOptions.AuthorId, text, title);

        var response = await ApiRequestHelper.PostAsync<CreateTextRequest, API.ApiResponse<int>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<int> CreateAutoVoiceover(int textId, int voiceId)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.CreateAutoVoiceover}";
        var request = new CreateAutoVoiceoverRequest(textId, voiceId);

        var response = await ApiRequestHelper.PostAsync<CreateAutoVoiceoverRequest, API.ApiResponse<int>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<int> CreateDiss(int acapellaId, int beatId, int startPointMilliseconds, string target)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.CreateDiss}";
        var request = new CreateDissRequest(acapellaId, beatId, startPointMilliseconds, target);

        var response = await ApiRequestHelper.PostAsync<CreateDissRequest, API.ApiResponse<int>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<GetDissResponse> GetDiss(int id)
    {
        var url = $"{_apiOptions.BaseUrl}{string.Format(_apiOptions.GetDiss, id)}";

        var response = await ApiRequestHelper.GetAsync<API.ApiResponse<GetDissResponse>>(_httpClient, url);
        return response.Data;
    }
}
