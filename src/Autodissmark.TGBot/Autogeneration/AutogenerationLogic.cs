using Autodissmark.ExternalServices.Translate.GoogleTranslate;
using Autodissmark.TGBot.API;
using Autodissmark.TGBot.API.Requests;
using Autodissmark.TGBot.API.Responses;
using Autodissmark.TGBot.TgSettings.Options;
using System.Net.Http.Headers;


namespace Autodissmark.TGBot.Autogeneration;

public class AutogenerationLogic
{
    private readonly Random Random;
    private readonly ApiOptions _apiOptions;
    private readonly HttpClient _httpClient;

    public AutogenerationLogic(ApiOptions apiOptions)
    {
        _apiOptions = apiOptions;
        
        Random = new Random();
        _httpClient = new HttpClient();
    }

    private void FillNullsWithRandom(AutogenerationRequest request, AutogenerationOptions options)
    {
        int len, randomNum;

        if (request.LinesCount is null)
        {
            len = options.LinesCounts.Count;
            randomNum = Random.Next(0, len);

            request.LinesCount = options.LinesCounts[randomNum];
        }
        if (request.WordsInLineCount is null)
        {
            len = options.WordsInLineCounts.Count;
            randomNum = Random.Next(0, len);

            request.WordsInLineCount = options.WordsInLineCounts[randomNum];
        }
        if (request.SwitchLanguage is null)
        {
            len = options.SwitchLanguages.Count;
            randomNum = Random.Next(0, len);

            request.SwitchLanguage = options.SwitchLanguages[randomNum];
        }
        if (request.SwitchTimes is null)
        {
            len = options.SwitchTimes.Count;
            randomNum = Random.Next(0, len);

            request.SwitchTimes = options.SwitchTimes[randomNum];
        }
        if (request.Target is null)
        {
            len = options.Targets.Count;
            randomNum = Random.Next(0, len);

            request.Target = options.Targets[randomNum];
        }
        if (request.VoiceId is null)
        {
            len = options.Voices.Count;
            randomNum = Random.Next(0, len);

            request.VoiceId = options.Voices[randomNum].Id;
        }
        if (request.BeatId is null)
        {
            len = options.Beats.Count;
            randomNum = Random.Next(0, len);

            request.BeatId = options.Beats[randomNum].Id;
        }
    }

    public async Task<byte[]> Autogenerate(AutogenerationRequest request, AutogenerationOptions autogenerationOptions)
    {
        FillNullsWithRandom(request, autogenerationOptions);

        await Login();

        var text = await GenerateText(request.LinesCount.Value, request.WordsInLineCount.Value);

        var targetedText = await AddTargetToText(text, request.Target);

        var switchedText = await SwitchTranslateText(targetedText, request.SwitchLanguage.Value, request.SwitchTimes.Value);

        var textId = await CreateText(switchedText, $"Autogenerated tgBot diss {DateTime.Now}");

        var acapellaId = await CreateAutoVoiceover(textId, request.VoiceId.Value);

        var dissId = await CreateDiss(acapellaId, request.BeatId.Value, 0, request.Target);

        var diss = await GetDiss(dissId);

        return diss.AudioData;
    }

    public async Task<bool> AutogenerateTest(AutogenerationRequest request, AutogenerationOptions autogenerationOptions)
    {
        FillNullsWithRandom(request, autogenerationOptions);

        await Login();

        var text = await GenerateText(request.LinesCount.Value, request.WordsInLineCount.Value);
        Console.WriteLine($"text: {text}");

        var targetedText = await AddTargetToText(text, request.Target);
        Console.WriteLine($"targetedText: {targetedText}");

        var switchedText = await SwitchTranslateText(targetedText, request.SwitchLanguage.Value, request.SwitchTimes.Value);
        Console.WriteLine($"switchedText: {switchedText}");

        var textId = await CreateText(switchedText, $"Autogenerated tgBot diss {DateTime.Now}");
        Console.WriteLine($"textId: {textId}");

        var acapellaId = await CreateAutoVoiceover(textId, request.VoiceId.Value);
        Console.WriteLine($"acapellaId: {acapellaId}");

        var dissId = await CreateDiss(acapellaId, request.BeatId.Value, 0, request.Target);
        Console.WriteLine($"dissId: {dissId}");

        var diss = await GetDiss(dissId);
        Console.WriteLine($"diss.AudioData: {diss.AudioData}");
        
        return true;
    }

    public async Task Login()
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.Login}";
        var request = new LoginRequest(_apiOptions.Email, _apiOptions.Password);

        var response = await ApiRequestHelper.PostAsync<LoginRequest, API.ApiResponse<LoginResponse>>(_httpClient, url, request);

        var jwtToken = response.Data.JwtToken;
        var jwtTokenValue = jwtToken.Split(' ')[1];

        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtTokenValue);
    }

    public async Task<string> GenerateText(int linesCount, int wordsInLineCount)
    {
        var url = $"{_apiOptions.BaseUrl}{string.Format(_apiOptions.GenerateText, linesCount, wordsInLineCount)}";

        var response = await ApiRequestHelper.GetAsync<API.ApiResponse<string>>(_httpClient, url);
        return response.Data;
    }

    public async Task<string> AddTargetToText(string text, string target)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.AddTargetToText}";
        var request = new AddTargetToTextRequest(text, target);

        var response = await ApiRequestHelper.PostAsync<AddTargetToTextRequest, API.ApiResponse<string>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<string> SwitchTranslateText(string text, Language switchLanguage, int switchTimes)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.SwitchTranslateText}";
        var request = new SwitchTranslateTextRequest(text, switchLanguage, switchTimes);

        var response = await ApiRequestHelper.PostAsync<SwitchTranslateTextRequest, API.ApiResponse<string>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<int> CreateText(string text, string title)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.CreateText}";
        var request = new CreateTextRequest(_apiOptions.AuthorId, text, title);

        var response = await ApiRequestHelper.PostAsync<CreateTextRequest, API.ApiResponse<int>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<int> CreateAutoVoiceover(int textId, int voiceId)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.CreateAutoVoiceover}";
        var request = new CreateAutoVoiceoverRequest(textId, voiceId);

        var response = await ApiRequestHelper.PostAsync<CreateAutoVoiceoverRequest, API.ApiResponse<int>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<int> CreateDiss(int acapellaId, int beatId, int startPointMilliseconds, string target)
    {
        var url = $"{_apiOptions.BaseUrl}{_apiOptions.CreateDiss}";
        var request = new CreateDissRequest(acapellaId, beatId, startPointMilliseconds, target);

        var response = await ApiRequestHelper.PostAsync<CreateDissRequest, API.ApiResponse<int>>(_httpClient, url, request);
        return response.Data;
    }

    public async Task<GetDissResponse> GetDiss(int id)
    {
        var url = $"{_apiOptions.BaseUrl}{string.Format(_apiOptions.GetDiss, id)}";

        var response = await ApiRequestHelper.GetAsync<API.ApiResponse<GetDissResponse>>(_httpClient, url);
        return response.Data;
    }
}
