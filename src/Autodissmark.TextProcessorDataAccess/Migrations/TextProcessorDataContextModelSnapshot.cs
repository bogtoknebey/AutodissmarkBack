// <auto-generated />
using Autodissmark.TextProcessorDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Autodissmark.TextProcessorDataAccess.Migrations
{
    [DbContext(typeof(TextProcessorDataContext))]
    partial class TextProcessorDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.ArtistEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.ArtistTextEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistEntityId");

                    b.ToTable("ArtistTexts");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.DictionaryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.DictionaryWordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DictionaryEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryEntityId");

                    b.ToTable("DictionaryWords");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.TextBaseArtistEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistEntityId")
                        .HasColumnType("int");

                    b.Property<int>("TextBaseEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistEntityId");

                    b.HasIndex("TextBaseEntityId");

                    b.ToTable("TextBaseArtists");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.TextBaseDictionaryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DictionaryEntityId")
                        .HasColumnType("int");

                    b.Property<int>("TextBaseEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryEntityId");

                    b.HasIndex("TextBaseEntityId");

                    b.ToTable("TextBaseDicitonaries");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.TextBaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ONNXURI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TextBases");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.ArtistTextEntity", b =>
                {
                    b.HasOne("Autodissmark.TextProcessorDataAccess.Entities.ArtistEntity", "ArtistEntity")
                        .WithMany("ArtistTextEntities")
                        .HasForeignKey("ArtistEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtistEntity");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.DictionaryWordEntity", b =>
                {
                    b.HasOne("Autodissmark.TextProcessorDataAccess.Entities.DictionaryEntity", "DictionaryEntity")
                        .WithMany("DictionaryWordEntities")
                        .HasForeignKey("DictionaryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictionaryEntity");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.TextBaseArtistEntity", b =>
                {
                    b.HasOne("Autodissmark.TextProcessorDataAccess.Entities.ArtistEntity", "ArtistEntity")
                        .WithMany("TextBaseArtistEntities")
                        .HasForeignKey("ArtistEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autodissmark.TextProcessorDataAccess.Entities.TextBaseEntity", "TextBaseEntity")
                        .WithMany("TextBaseArtistEntities")
                        .HasForeignKey("TextBaseEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtistEntity");

                    b.Navigation("TextBaseEntity");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.TextBaseDictionaryEntity", b =>
                {
                    b.HasOne("Autodissmark.TextProcessorDataAccess.Entities.DictionaryEntity", "DictionaryEntity")
                        .WithMany("TextBaseDicitonaryEntities")
                        .HasForeignKey("DictionaryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autodissmark.TextProcessorDataAccess.Entities.TextBaseEntity", "TextBaseEntity")
                        .WithMany("TextBaseDicitonaryEntities")
                        .HasForeignKey("TextBaseEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictionaryEntity");

                    b.Navigation("TextBaseEntity");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.ArtistEntity", b =>
                {
                    b.Navigation("ArtistTextEntities");

                    b.Navigation("TextBaseArtistEntities");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.DictionaryEntity", b =>
                {
                    b.Navigation("DictionaryWordEntities");

                    b.Navigation("TextBaseDicitonaryEntities");
                });

            modelBuilder.Entity("Autodissmark.TextProcessorDataAccess.Entities.TextBaseEntity", b =>
                {
                    b.Navigation("TextBaseArtistEntities");

                    b.Navigation("TextBaseDicitonaryEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
